{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","a","_callApi","movies","setState","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","medium_cover_image","id","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTA6BA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACE,qBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,iBAIxD,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,sBAAMF,UAAU,eAAhB,SAAgCE,IASzBC,MA1Cf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,sBAAKL,UAAU,QAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,MAEtC,sBAAKC,UAAU,eAAf,UACI,6BAAKD,IACL,qBAAKC,UAAU,eAAf,SACKI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,cAACN,EAAD,CAAYC,MAAOA,GAAYK,QAEjE,mBAAGP,UAAU,iBAAb,SACI,cAAC,IAAD,CACIQ,KAAMH,EACNI,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,qBCiCjBC,E,4MAhDbC,MAAO,G,EAQNC,W,sBAAa,4BAAAC,EAAA,sEACS,EAAKC,WADd,OACNC,EADM,OAEZ,EAAKC,SAAS,CACZD,WAHU,2C,EAOdD,SAAW,WACT,OAAOG,MAAM,yDACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKN,UACvBO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG5BG,cAAgB,WAWd,OAVe,EAAKf,MAAMI,OAAOZ,KAAK,SAAAwB,GAAK,OACzC,cAAC,EAAD,CACA/B,MAAO+B,EAAM/B,MACbH,OAAQkC,EAAMC,mBAEd3B,OAAQ0B,EAAM1B,OACdC,SAAUyB,EAAMzB,UAFXyB,EAAME,Q,uDAxBf,WACEC,KAAKlB,e,oBAgCP,WACE,IAAOG,EAAUe,KAAKnB,MAAfI,OACP,OACE,qBAAKlB,UAAWkB,EAAO,MAAM,eAA7B,SAEIA,EAASe,KAAKJ,gBAAkB,gB,GA3CxBK,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.28145b4d.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Column\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n      <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"></img>\r\n    );\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <spen className=\"Movie_Genres\">{genre}</spen>\r\n    )\r\n}\r\n\r\nMovie.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import './App.css';\nimport Movie from './Movie'\nimport { Component } from 'react';\n\nclass App extends Component{\n\n  state ={\n  }\n\n  componentDidMount(){\n    this._getMovies();\n    \n  }\n\n   _getMovies = async () =>{\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () =>{\n    const movies = this.state.movies.map( movie => \n      <Movie \n      title={movie.title} \n      poster={movie.medium_cover_image} \n      key={movie.id} \n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      />\n    );\n\n    return movies;\n  }\n  \n  render(){\n    const {movies} = this.state;\n    return (\n      <div className={movies?\"App\":\"App--loading\"}>\n        {\n          movies ? this._renderMovies() : 'Loading'\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}